{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "1) Define about list.\n",
        "-  Python Lists are just like dynamically sized arrays, declared in other languages.\n",
        "*  In simple language, a list is a collection of things, enclosed in [ ] and separated by commas.\n",
        "*  The list is a sequence data type which is used to store the collection of data."
      ],
      "metadata": {
        "id": "KsR5XUMhY0U1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2) Create 10 examples storing different data types.\n"
      ],
      "metadata": {
        "id": "jki_2BrEZu2e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a = [1,2,4,5]\n",
        "print (type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9IA-GLTqeZBE",
        "outputId": "65b22b3c-4d57-4498-a56a-5075b1756848"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'list'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "languages = [\" Swift\", \"Java\", \"Python\"]\n",
        "# access element at index 0\n",
        "print(languages[0])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JuW--SwkgFzK",
        "outputId": "049c4465-1119-4dd0-f0b1-97b315471c6f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Swift\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "languages = [\"Swift\", \"Java\", \"Python\"]\n",
        "# access element at index 2\n",
        "print(languages[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0kBTg9SAgpxk",
        "outputId": "837bb976-2532-42a6-e943-36abe87ebd5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = (4)\n",
        "print (c)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xZkgzVQfg1HV",
        "outputId": "d81ec16f-853f-44b4-a46c-7ef69c9c3700"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 1\n",
        "b = float (a)\n",
        "print (type(b))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MKe96TVXhOos",
        "outputId": "fec4fcfd-c139-44a2-cbb9-865417c22b8f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = 56\n",
        "b= complex (a)\n",
        "print(b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LIMFtXMQhjD7",
        "outputId": "ca0fb65b-24c6-4040-bdae-48e201db2e4d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(56+0j)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "List = []\n",
        "print(\"Initial blank List: \")\n",
        "print(List)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CVgKM-XmioHj",
        "outputId": "a3dcb55b-698b-48ef-ac0f-c767caeac39b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial blank List: \n",
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3) Create a list of 15 elements you need to access each and every elements from list both positive and negative.\n"
      ],
      "metadata": {
        "id": "D_nktj3Hri-2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a list of 15 elements\n",
        "my_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]\n",
        "\n",
        "# Accessing elements using positive indexing\n",
        "print (my_list [0])\n",
        "print (my_list [5])\n",
        "print (my_list [14])\n",
        "print (my_list [8])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "svmRj-O8r4xF",
        "outputId": "e11bbef1-b5fc-4666-88de-b0e2f11c35a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "60\n",
            "150\n",
            "90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating a list of 15 elements\n",
        "my_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]\n",
        "\n",
        "# Accessing elements using negative indexing\n",
        "print (my_list [-1])\n",
        "print (my_list [-5])\n",
        "print (my_list [-15])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KuFd_2N4tnt7",
        "outputId": "8b4f0206-95f6-469a-b786-c036d28a97e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "150\n",
            "110\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4)  Slicing in both positive and negative."
      ],
      "metadata": {
        "id": "tMd8GH3Vv1Ib"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# List slicing in python\n",
        "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "\n",
        "# items from positive index\n",
        "# items from index 2 to index 5\n",
        "print (my_list [2:6])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VP5pC1Dxv-MH",
        "outputId": "fcbe40fc-862b-4509-9101-437b6050c345"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3, 4, 5, 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List slicing in python\n",
        "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "\n",
        "# items from negative index\n",
        "print (my_list [-2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IEQnTiWhxeIj",
        "outputId": "954e4071-8e9f-4d78-f3f7-cc3a8b20e984"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[9, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5)  Contaminate 5 examples.\n"
      ],
      "metadata": {
        "id": "AMOHs5e52wrm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test_list1 = [1, 4, 5, 6, 5]\n",
        "test_list2 = [3, 5, 7, 2, 5]\n",
        "print (test_list1 + test_list2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z56TGq3t3Ocz",
        "outputId": "dfd8b37b-6191-4dc5-edc2-df8f6ec3a669"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 5, 6, 5, 3, 5, 7, 2, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list_1 = [1, 'a']\n",
        "list_2 = [3, 4, 5]\n",
        "\n",
        "list_joined = list_1 + list_2\n",
        "print(list_joined)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PKOvF7bZ_Bam",
        "outputId": "dcd82615-527c-46b3-ebd6-e705777d2818"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 'a', 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [\"Apple\", \"Banana\", \"Mango\"]\n",
        "b = [\"Strawberry\"]\n",
        "\n",
        "print (a+b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "llJDr_5i_ndS",
        "outputId": "b45459f8-8feb-4a5d-c9c4-6c8ff6cec99c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Apple', 'Banana', 'Mango', 'Strawberry']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = [5, 6, 7, 8, 9, 10]\n",
        "y = [1, 2, 3, 4, 5]\n",
        "\n",
        "print (x + y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ofTlFgOqAMpA",
        "outputId": "cef3705d-5f2f-4601-c1da-7d291a7f2392"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = [1, 2,]\n",
        "d = [3, 4]\n",
        "\n",
        "print (c + d)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xHurdYA0BDgw",
        "outputId": "5906e2c4-ab7c-4c8b-de34-0f70e0b8c77f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6) Repetition of 5 list.\n"
      ],
      "metadata": {
        "id": "Vi2GAe7GBU1J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_list = [\"Apple\", \"Banana\", \"Mango\"]\n",
        "\n",
        "print (a*4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4z1K1U1NBeDA",
        "outputId": "5126659f-b337-444f-b480-3439c2d31365"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Apple', 'Banana', 'Mango', 'Apple', 'Banana', 'Mango', 'Apple', 'Banana', 'Mango', 'Apple', 'Banana', 'Mango']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = [67, 89, 90]\n",
        "y = x*9\n",
        "\n",
        "print (y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FL1HPOPPCzXw",
        "outputId": "1a22366a-63fe-46c0-adcd-4da146f2b2a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[67, 89, 90, 67, 89, 90, 67, 89, 90, 67, 89, 90, 67, 89, 90, 67, 89, 90, 67, 89, 90, 67, 89, 90, 67, 89, 90]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " letters = [\"n\", \"q\", \"w\"]\n",
        " letters * 3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "92NoxNcEDFH9",
        "outputId": "6cc62e06-d200-4872-e24f-a99603997109"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['n', 'q', 'w', 'n', 'q', 'w', 'n', 'q', 'w']"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " codes = [17, 5, 41]\n",
        " [codes] * 4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hrmSTtQvDoWt",
        "outputId": "fdea4da9-bb70-45ae-8190-9a5aa7f2a94d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[17, 5, 41], [17, 5, 41], [17, 5, 41], [17, 5, 41]]"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = [100, 200, 300, 400, 500]\n",
        "b = a*10\n",
        "\n",
        "print (b)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vsrh_YLiD9Xe",
        "outputId": "50179692-f8b2-456e-ff31-242c5afa40ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500, 100, 200, 300, 400, 500]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7) List methods.\n",
        "-  appends() - Used for adding elements to the end of the List."
      ],
      "metadata": {
        "id": "1Xah-6NAK3eB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Adds List Element as value of List.\n",
        "List = ['Mathematics', 'chemistry', 1997, 2000]\n",
        "List.append(20544)\n",
        "print(List)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SaOXD-jTLgIH",
        "outputId": "f314d962-71f7-41d0-ba1a-3eacde99f253"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Mathematics', 'chemistry', 1997, 2000, 20544]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  extend()- Extends the list by adding all elements from an iterable."
      ],
      "metadata": {
        "id": "r31OrQLxLjEa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List1 = [1, 2, 3]\n",
        "List2 = [2, 3, 4, 5]\n",
        "\n",
        "# Add List2 to List1\n",
        "List1.extend(List2)\n",
        "print(List1)\n",
        "\n",
        "# Add List1 to List2 now\n",
        "List2.extend(List1)\n",
        "print(List2)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ami2uM1rLfxu",
        "outputId": "c1c4d15f-a615-475b-e911-b65ea00b3a91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 2, 3, 4, 5]\n",
            "[2, 3, 4, 5, 1, 2, 3, 2, 3, 4, 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  insert()-  Inserts an element at a specified position."
      ],
      "metadata": {
        "id": "dctU3wXtMAPV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List = ['Mathematics', 'chemistry', 1997, 2000]\n",
        "# Insert at index 2 value 10087\n",
        "List.insert(2, 10087)\n",
        "print(List)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4D_Q1E8IMRz4",
        "outputId": "06079698-fa2a-45f6-af0d-32be7c274105"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Mathematics', 'chemistry', 10087, 1997, 2000]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  remove()-  Removes the first occurrence of an element with the specified value."
      ],
      "metadata": {
        "id": "4FGRldj6Ma09"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]\n",
        "List.remove(3)\n",
        "print(List)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3166DGydMsp1",
        "outputId": "e2a75281-d355-474e-832e-b5c35fe01b6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.3, 4.445, 5.33, 1.054, 2.5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  pop()- Removes the element at the specified position and returns it."
      ],
      "metadata": {
        "id": "TH93qQ9lNZ_c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List = [2.3, 4.445, 3, 5.33, 1.054, 2.5]\n",
        "print(List.pop())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EziEYbaxNSmR",
        "outputId": "ca06830e-8f13-46c0-8dad-d5bb162dfa24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  clear()- Removes all elements from the list."
      ],
      "metadata": {
        "id": "gvw2SrSpNsao"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fruits = ['apple', 'banana', 'cherry']\n",
        "fruits.clear()\n",
        "print(fruits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ynap4YvN39v",
        "outputId": "b46cc7a2-5288-40bf-97a0-f0d2d24048d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  index()- Returns the index of the first element with the specified value."
      ],
      "metadata": {
        "id": "Kxuo8JI1OBUc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "List = [1, 2, 3, 1, 2, 1, 2, 3, 2, 1]\n",
        "print(List.index(2))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MlZumnXmOO5-",
        "outputId": "8f237c74-3e05-471d-e3df-17a767a872aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  count()- Returns the number of elements with the specified value."
      ],
      "metadata": {
        "id": "rnQZ3UagOmNZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fruits = ['apple', 'banana', 'cherry', 'banana']\n",
        "count_of_banana = fruits.count ('banana')\n",
        "print (count_of_banana)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dFiKElgNOymg",
        "outputId": "bc0684b3-6ed8-447d-f103-539e64fb9540"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  sort()- Sorts the list in ascending order by default."
      ],
      "metadata": {
        "id": "hpagok0EPhUQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fruits = ['cherry', 'banana', 'apple']\n",
        "fruits.sort()\n",
        "print (fruits)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "axsJ1LkZPshV",
        "outputId": "eef3de8f-fef7-46e3-88f2-fc169d44293e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['apple', 'banana', 'cherry']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*  reverse()- Reverses the order of the list."
      ],
      "metadata": {
        "id": "r_JYz-TTQGyv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# creating a list\n",
        "list = [1,2,3,4,5]\n",
        "#reversing the list\n",
        "list.reverse()\n",
        "#printing the list\n",
        "print(list)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JPuaUZncQQhy",
        "outputId": "10319f0c-897a-4cc1-c1e9-1f5fe8cd7472"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5, 4, 3, 2, 1]\n"
          ]
        }
      ]
    }
  ]
}